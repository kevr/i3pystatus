#!/usr/bin/python3
import logging
import sys
import os
import traceback
import re
import time
from datetime import datetime
from subprocess import Popen, PIPE
import argparse
from Xlib import X
from Xlib.display import Display
from threading import Thread
import json

# Xlib tracking globals
display = Display()
root = display.screen().root

NET_ACTIVE_WINDOW = display.intern_atom('_NET_ACTIVE_WINDOW')
NET_WM_NAME = display.intern_atom('_NET_WM_NAME')

# Global window title cache, updated by x_event_loop.
window_title = "no window title"

class Color:
    blue = None
    red = None
    green = None
    yellow = None

def color(text, value):
    return f'<span foreground="{value}">{text}</span>'

def execute(command, *args, **kwargs):
    proc = Popen([command] + list(args), stdout=PIPE, stderr=PIPE)
    out, _ = proc.communicate()
    if proc.returncode != 0:
        raise OSError("%s returned %d" % (command, proc.returncode))
    return out.decode()

def get_user():
    return "%s [%s]" % (
        color(os.environ.get("USER"), Color.yellow),
        color(os.uname().nodename, Color.yellow)
    )

def get_memory():
    total, available = 0, 0

    with open("/proc/meminfo") as f:
        data = f.readlines()

        total = int(re.match(r'^MemTotal:\s+(\d+) kB$', data[0])[1])
        free = int(re.match(r'^MemFree:\s+(\d+) kB$', data[1])[1])
        buffered = int(re.match(r'^Buffers:\s+(\d+) kB$', data[3])[1])
        cached = int(re.match(r'^Cached:\s+(\d+) kB$', data[4])[1])

        available = free + (buffered + cached)

    used_memory = total - available  # In kB
    if used_memory >= (total * 0.75):
        used_memory = color(
            "{:.1f}".format(used_memory / 1000 / 1000),
            Color.red
        )
    elif used_memory >= (total * 0.50):
        used_memory = color(
            "{:.1f}".format(used_memory / 1000 / 1000),
            Color.yellow
        )
    else:
        used_memory = "{:.1f}".format(used_memory / 1000 / 1000)

    return "{}/{:.1f} GB".format(used_memory, total / 1000 / 1000)

def get_processors():
    output = execute("lscpu").split("\n")

    threads = []
    speeds = []

    captures = {
        r'^CPU MHz:\s+([0-9.]+)$': lambda m: speeds.append(float(m[1])),
        r'^CPU\(s\):\s+([0-9]+)$': lambda m: threads.append(int(m[1]))
    }

    for line in output:
        for cap, func in captures.items():
            match = re.match(cap, line)
            if match:
                func(match)

    threads = threads[-1]

    # Average CPU speed in MHz.
    avg_speed = int(sum(speeds) / len(speeds))

    # Get avg temperature.
    output = None
    try:
        output = execute("sensors").split("\n")
    except Exception as exc:
        logging.error(str(exc))

    temps = []
    if output:
        output = [e for e in output if e.startswith("Core")]
        for line in output:
            match = re.match(r'^Core \d+:\s+?[+]([0-9.]+)°C.*$', line)
            if match:
                temps.append(float(match[1]))

    temp = int(max(temps)) if temps else "NA"
    if temp > 65:
        temp = color(f"{temp}°C", Color.red)
    elif temp > 50:
        temp = color(f"{temp}°C", Color.yellow)
    else:
        temp = color(f"{temp}°C", Color.green)

    return "{} MHz ({}, {})".format(avg_speed, threads, temp)

def get_datetime():
    now = datetime.now()
    return now.strftime("%a %m/%d/%Y %I:%M:%S %p " + now.astimezone().tzname())

def segment_route(line):
    segments = line.split(" ")
    route = {"dest": segments[0]}
    segments = segments[1:]

    def field_func(segments):
        key = segments[0]
        value = segments[1]
        segments = segments[2:]
        return segments, key, value

    actions = {
        "via": field_func,
        "dev": field_func,
        "src": field_func
    }

    while len(segments):
        key = segments[0]
        if key in actions:
            f = actions[key]
            segments, k, v = f(segments)
            route[k] = v
        else:
            segments = segments[1:]

    return route

def get_lan_ip():
    ''' Note: This function needs improvement to account for network
    setups with more than one IP address or active interface. '''
    ip = "127.0.0.1"
    output = execute("ip", "route").split("\n")

    default = segment_route(output[0])
    if default["dest"] != "default":
        return ip

    iface = default["dev"]
    block = "0"

    output = output[1:]  # Truncate the default route.
    for line in output:
        route = segment_route(line)
        dest = route["dest"]
        # Hackily check the first three characters of both addresses.
        # We should check this more completely including accounting
        # for the /[0-32] block at the end of a dest string.
        if dest[:3] == default["via"][:3] and "src" in route:
            ip = route["src"]
            block = dest.split("/")[-1]
            iface = route["dev"]

    speed = ''
    with open("/sys/class/net/%s/speed" % default["dev"]) as f:
        speed = f.read().rstrip()

    return "%s - %s/%s (%s Mbit/s)" % (iface, ip, block, speed)

def get_size_in_gb(match):
    # Conversion table (to GB).
    convert = {"M": 0.001, "G": 1, "T": 1000}

    unit = match[-1]
    if not unit in convert:
        raise ValueError("Unable to convert '%s' to GB" % match[0])

    value = float(match[:-1])
    return value * convert[unit]

def get_disks():
    to_include = {"/", "/home", "/var"}
    output = execute("df", "-h").split("\n")

    # total_size = 0
    # total_used = 0
    # count = 0

    # mounts = []
    # sizes = []
    used = []

    disks = []

    # items = []
    for line in output:
        match = re.match(
            r'^.+\s+([0-9.]+.)\s+([0-9.]+.)\s+([0-9.]+.)\s+\d+[%]\s+(.+)$',
            line
        )
        if match and match[4] in to_include:
            disks.append((
                match[4],
                get_size_in_gb(match[1]),
                get_size_in_gb(match[2])
            ))

    output_items = []
    for disk, size, used in disks:
        output_items.append("{} - {:.1f}/{:.1f} GB".format(disk, used, size))

    # Return a joined output_items, wrapped by brackets.
    return ", ".join(output_items)

def get_status(delim=" • "):
    ''' Prepare a full status string by combining a list of
    selected strings (functions above) into one big string,
    separated by the delimiter chosen.

    @param delim Delimiter separating each status field.
    @returns A formatted status string. '''

    # Prepare a list of fields, each consisting of a tuple of
    # (OptionalLabel, FieldValueString).
    fields = [
        (None, get_user()),
        ("Focus", window_title),
        ("LAN", get_lan_ip()),
        ("CPU", get_processors()),
        ("RAM", get_memory()),
        ("Disks", get_disks()),
        (None, get_datetime())
    ]
    return delim.join([
        "%s: %s" % (color(item[0], "#ffffff"),
                    color(item[1], "#aaaaaa")) if item[0] else item[1]
        for item in fields
    ])

def window_obj(win_id):
    global display
    """Simplify dealing with BadWindow (make it either valid or None)"""
    window_obj = None
    if win_id:
        try:
            window_obj = display.create_resource_object('window', win_id)
        except:
            pass
        return window_obj

def x_event_loop():
    root.change_attributes(event_mask=X.PropertyChangeMask)
    while True:
        try:
            event = display.next_event()
            if not event:
                continue

            response = root.get_full_property(
                NET_ACTIVE_WINDOW, X.AnyPropertyType)
            win = window_obj(response.value[0])

            prop = win.get_full_property(NET_WM_NAME, 0)

            global window_title
            window_title = re.sub(r'^.*[—-] ', '', prop.value.decode("UTF-8"))
        except:
            continue

def setup_logging(logfile_path, level=logging.INFO):
    # Setup logging to output to $HOME/.i3bar.log.
    logging.basicConfig(level=level, filename=logfile_path)

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--interval", "-i",
                        dest="interval",
                        help="Interval timeout (in seconds).",
                        default="5")
    parser.add_argument("--log-path", "-l",
                        dest="logfile_path",
                        help="Logfile path (default: ~/.i3pystatus.log)",
                        default=os.path.join(os.environ.get("HOME"), ".i3pystatus.log"))
    parser.add_argument("--verbose", "-v",
                        action="store_const",
                        const=True,
                        help="Enable verbose logging.",
                        default=False)
    parser.add_argument("--red", "-r", default="#ff9999",
                        help="RGB hex value used for the red color")
    parser.add_argument("--green", "-g", default="#99ff99",
                        help="RGB hex value used for the green color")
    parser.add_argument("--yellow", "-y", default="#fff080",
                        help="RGB hex value used for the yellow color")
    parser.add_argument("--blue", "-b", default="#9999ff",
                        help="RGB hex value used for the blue color")
    args = parser.parse_args()

    # Set up our color configuration.
    Color.red = args.red
    Color.green = args.green
    Color.blue = args.blue
    Color.yellow = args.yellow

    level = logging.DEBUG if args.verbose else logging.INFO
    setup_logging(args.logfile_path, level=level)

    interval = float(args.interval)

    thread = Thread(target=x_event_loop)
    thread.start()

    print(json.dumps({"version": 1}), flush=True)
    ''' Main entry point for the program. In an infinite loop,
    print out the current get_status() value, flush stdout,
    then sleep for 1.5 seconds before the next iteration. '''
    print("[", end="")
    while True:
        status = get_status()
        print(json.dumps([{
            "separator": False,
            "full_text": status,
            "markup": "pango"
        }]) + ",", flush=True, end="")
        time.sleep(interval)

    thread.join()

    return 0


if __name__ == "__main__":
    e = 1  # Default return code.
    try:
        # Try to execute main and update the return code.
        e = main()
    except Exception as exc:
        # If an exception is caught, print out the traceback
        # and set the return code back to 1, to safely return
        # with an error.
        logging.error(
            "Caught root Exception (traceback below)!\n\n%s"
            % traceback.format_exc()
        )
        e = 1
    exit(e)
